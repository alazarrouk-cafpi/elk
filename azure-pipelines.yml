trigger:
- main
pr: none  # Disable PR triggers, can be adjusted as needed

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: RunCommandsOnVM
  steps:
  - task: AzureCLI@2
    displayName: 'Run Commands on Azure VM'
    inputs:
      azureSubscription: 'sp-devops'  # Ensure this matches the name of your service connection
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Variables
        RESOURCE_GROUP="RG-PFE"
        VM_NAME="Elasticsearch-Ala"

        # Function to execute run-command with retry logic
        function run_command {
          local attempt=0
          local max_attempts=5
          local sleep_interval=30
          local command="$1"

          while (( attempt < max_attempts )); do
            az vm run-command invoke \
              --resource-group $RESOURCE_GROUP \
              --name $VM_NAME \
              --command-id RunShellScript \
              --scripts "$command" && break

            echo "Run command failed. Attempt $((attempt + 1)) of $max_attempts. Retrying in $sleep_interval seconds..."
            ((attempt++))
            sleep $sleep_interval
          done

          if (( attempt == max_attempts )); then
            echo "Run command failed after $max_attempts attempts."
            exit 1
          fi
        }

        # Define the script to run
        SCRIPT='
        cd /home/admala
        rm -rf elk*
        curl -L -o elk.zip https://github.com/alazarrouk-cafpi/elk/archive/refs/heads/main.zip
        unzip elk.zip
        rm -rf /mnt/data/elastalert-config/config/*
        rm -rf /mnt/data/elastalert-config/rules/*
        rm -rf /mnt/data/elastalert-config/custom_modules/*
        cp -r /home/admala/elk-main/elastalert/config/* /mnt/data/elastalert-config/config/
        cp -r /home/admala/elk-main/elastalert/rules/* /mnt/data/elastalert-config/rules/
        cp -r /home/admala/elk-main/elastalert/custom_modules/* /mnt/data/elastalert-config/custom_modules/
        cat <<EOF > /etc/exports
        /mnt/data/certs 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/fleet-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/logstash-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/kibana-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/es-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/elastalert-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/elastalert-config/config 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/elastalert-config/rules 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/elastalert-config/custom_modules 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/filebeatlogs-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        /mnt/data/filebeatmetrics-data 10.53.2.0/24(rw,sync,no_root_squash,no_subtree_check)
        EOF
        exportfs -a
        systemctl restart nfs-kernel-server
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/configMaps/
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/persistent-volumes/
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/persistent-volumes-claims/
        microk8s kubectl delete deployment elastalert 
        microk8s kubectl delete deployment es01
        microk8s kubectl delete deployment filebeat-logs
        microk8s kubectl delete deployment filebeat-metrics
        microk8s kubectl delete deployment fleet
        microk8s kubectl delete deployment kibana
        microk8s kubectl delete deployment logstash
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/elasticsearch-deployment.yaml
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/logstash-deployment.yaml
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/kibana-deployment.yaml
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/fleet-deployment.yaml
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/filebeat-logs-deployment.yaml
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/filebeat-metrics-deployment.yaml
        microk8s kubectl apply -f /home/admala/elk-main/kubernetes/elk-deployments/elastalert2-deployment.yaml
        '

        # Execute the script with retry logic
        run_command "$SCRIPT"
