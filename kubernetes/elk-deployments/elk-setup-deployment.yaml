apiVersion: batch/v1
kind: Job
metadata:
  name: elastic-setup
spec:
  template:
    spec:
      securityContext:
        runAsUser: 0
      containers:
        - name: setup
          image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: true
            capabilities:
              add: ["SYS_ADMIN"]
          command: ["/bin/bash", "-c"]
          env:
            - name: ELASTIC_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: elk-config
                  key: ELASTIC_PASSWORD
            - name: KIBANA_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: elk-config
                  key: KIBANA_PASSWORD
            - name: STACK_VERSION
              valueFrom:
                configMapKeyRef:
                  name: elk-config
                  key: STACK_VERSION
          args:
            - |
              echo "#package installation"
              curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x jq
              mv jq /bin/jq

              if [ ! -f config/certs/ca.zip ]; then
                echo "#Creating CA";
                bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                unzip config/certs/ca.zip -d config/certs;
              fi;

              if [ ! -f config/certs/certs.zip ]; then
                echo "#Creating certs";
                echo -ne \
                "instances:\n"\
                "  - name: es01\n"\
                "    dns:\n"\
                "      - es01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "      - 10.53.2.15\n"\
                "      - 10.53.2.115\n"\
                "      - 10.53.2.116\n"\
                "      - 10.53.2.117\n"\
                "  - name: kibana\n"\
                "    dns:\n"\
                "      - kibana\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "      - 10.53.2.15\n"\
                "      - 10.53.2.115\n"\
                "      - 10.53.2.116\n"\
                "      - 10.53.2.117\n"\
                "  - name: logstash\n"\
                "    dns:\n"\
                "      - logstash\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "      - 10.53.2.15\n"\
                "      - 10.53.2.115\n"\
                "      - 10.53.2.116\n"\
                "      - 10.53.2.117\n"\
                "  - name: fleet\n"\
                "    dns:\n"\
                "      - fleet\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "      - 10.53.2.15\n"\
                "      - 10.53.2.115\n"\
                "      - 10.53.2.116\n"\
                "      - 10.53.2.117\n"\
                "  - name: elastalert2\n"\
                "    dns:\n"\
                "      - elastalert2\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
                bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                unzip config/certs/certs.zip -d config/certs;
              fi;


              echo "#Setting file permissions"
              chown -R root:root config/certs;
              find . -type d -exec chmod 777 \{\} \;;
              find . -type f -exec chmod 777 \{\} \;;
              
              echo "#Waiting for Elasticsearch availability";
              until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; 
                do sleep 30; 
              done;

              echo "#Setting kibana_system password";
              until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
              
              echo "#Waiting for kibana availability"; 
              until [ "$(curl -s -k --user elastic:Aloulou556 http://kibana:5601/api/status | jq -r '.status.overall.level')" = "available" ]; do
                  echo "Waiting for Kibana to be available..."
                  sleep 10
              done

              echo "#Creating fleet server";
              curl -u elastic:Aloulou556 \
              --request POST \
              --url http://kibana:5601/api/fleet/fleet_server_hosts \
              --header 'content-type: application/json' \
              --header 'kbn-xsrf: true' \
              --data '{
                "id": "fleet-server",
                "name": "Fleet Server",
                "is_default": true,
                "host_urls": [
                  "https://10.53.2.15:30002"
                ]
              }'

              echo "#Creating windows agent policy"
              curl -u elastic:Aloulou556 --request POST \
              --url http://kibana:5601/api/fleet/agent_policies?sys_monitoring=true \
              --header 'content-type: application/json' \
              --header 'kbn-xsrf: true' \
              --data '{"id":"windows-policy","name":"Windows agent policy","namespace":"default","monitoring_enabled":["logs","metrics"]}'
              
              echo "#Creating linux agent policy"
              curl -u elastic:Aloulou556 --request POST \
              --url http://kibana:5601/api/fleet/agent_policies?sys_monitoring=true \
              --header 'content-type: application/json' \
              --header 'kbn-xsrf: true' \
              --data '{"id":"linux-policy","name":"Linux agent policy","namespace":"default","monitoring_enabled":["logs","metrics"]}' 


              echo "#Assigning windows integration to the windows agent policy" 
              curl -k -s -u elastic:Aloulou556 \
              -XPOST -H "kbn-xsrf: true" -H "Content-type: application/json" \
              "http://kibana:5601/api/fleet/package_policies" \
              -d '{"name": "windows-sysmonlogs-integration", "namespace": "default", "policy_id":"windows-policy", "package":{"name": "windows", "version": "1.45.1"}}'
              

              echo "#Assigning sysmon integration to the linux agent policy" 
              curl -k -s -u elastic:Aloulou556 \
              -XPOST -H "kbn-xsrf: true" -H "Content-type: application/json" \
              "http://kibana:5601/api/fleet/package_policies" \
              -d '{"name": "symon-integration", "namespace": "default", "policy_id":"linux-policy", "package":{"name": "sysmon_linux", "version": "1.59.0"}}'
              
              
              echo "All done!";
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/config/certs
              name: certs
      volumes:
        - name: certs
          persistentVolumeClaim:
            claimName: certs-pvc
      restartPolicy: OnFailure
