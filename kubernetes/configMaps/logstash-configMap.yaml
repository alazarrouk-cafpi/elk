apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  pipelines.yml: |
    - pipeline.id: logs
      path.config: "/usr/share/logstash/pipeline/logstash-azure-logs.conf"
    - pipeline.id: metrics
      path.config: "/usr/share/logstash/pipeline/logstash-azure-metrics.conf"
  logstash-azure-logs.conf: |-
    input {
      beats {
        port => 5044
      }
    }

    filter {
      json {
        source => "message"
        target => "data"
      }
      
      if [azure][storage][container][name] == "insights-logs-appservicehttplogs" {
        ruby {
          code => '
            begin
              # Get the properties field from the data
              properties_hash = event.get("[data][properties]")
              
              # Ensure properties is a Hash or Array
              if properties_hash.is_a?(Hash) || properties_hash.is_a?(Array)
                # Convert properties to JSON string
                parse_to_string = properties_hash.to_json
                event.set("[data][properties]", parse_to_string)
              end
              
              # Parse the JSON string back to a Hash
              dataparsed = JSON.parse(event.get("[data][properties]"))
              
              # Check if CsHost contains "scm" and if CIp is "127.0.0.1"
              if !dataparsed["CsHost"].include?("scm") && !dataparsed["CIp"].include?("127.0.0.1")
                # Extract the app service from CsHost and set it in httplogs
                appservice = dataparsed["CsHost"].split(".").first
                event.set("[data][httplogs][appservice]", appservice)
                
                # Set other parsed values in the httplogs field
                dataparsed.each { |key, value|
                  event.set("[data][httplogs][#{key}]", value)
                }
              else
                # Cancel the event if conditions are not met
                event.cancel
              end
            rescue => e
              # Log any Ruby exceptions
              puts "Ruby exception logs app service: #{e.message}"
            end
          '
        }
      }
      if [azure][storage][container][name] == "insights-logs-auditlogs" {
        ruby {
            code => '
              begin
                  if event.get("data")["properties"]["initiatedBy"]["app"]
                     event.set("data.actionner", event.get("data")["properties"]["initiatedBy"]["app"]["displayName"])
                  else
                     event.set("data.actionner", event.get("data")["properties"]["initiatedBy"]["user"]["userPrincipalName"])
                  end
                  if event.get("data")["properties"]["targetResources"][0]["userPrincipaleName"]
                     event.set("data.target", event.get("data")["properties"]["targetResources"][0]["userPrincipaleName"])
                  else
                     event.set("data.target", event.get("data")["properties"]["targetResources"][0]["displayName"])
                  end
                   event.set("data.targetType", event.get("data")["properties"]["targetResources"][0]["type"])
              end
            '
        }
      }
    }

    output {
      if [azure][storage][container][name] == "insights-logs-appservicehttplogs" {
        elasticsearch {
          hosts => ["https://es01:9200"]
          user => "elastic"
          password => "Aloulou556"
          document_id => "%{[@metadata][_id]}"
          index => "appservice-httplogs-%{+YYYY.MM.dd}"
          ssl => true
          cacert => "/usr/share/logstash/certs/ca/ca.crt"
        }
      }
      if [azure][storage][container][name] == "insights-logs-auditlogs" {
        elasticsearch {
          hosts => ["https://es01:9200"]
          user => "elastic"
          password => "Aloulou556"
          document_id => "%{[@metadata][_id]}"
          index => "entraid-auditlogs-logs-%{+YYYY.MM.dd}"
          ssl => true
          cacert => "/usr/share/logstash/certs/ca/ca.crt"
        }
      }
      if [azure][storage][container][name] == "insights-logs-riskyusers" {
        elasticsearch {
          hosts => ["https://es01:9200"]
          user => "elastic"
          password => "Aloulou556"
          document_id => "%{[@metadata][_id]}"
          index => "entraid-riskyusers-logs-%{+YYYY.MM.dd}"
          ssl => true
          cacert => "/usr/share/logstash/certs/ca/ca.crt"
        }
      }
    }
  logstash-azure-metrics.conf: |-
    input {
      beats {
        port => 5045
      }
    }

    filter {
        json {
          source => "message"
          target => "data"
        }
          ruby { code => '
                  begin
                    resource_type=event.get("data")["resourceId"].match(/PROVIDERS\/([^\/]+)/)[1]
                    event.set("data.resourceType", resource_type)

                    # Metric of storage account
                    if resource_type == "MICROSOFT.STORAGE"
                      if event.get("data")["metricName"]=="UsedCapacity" || ( (event.get("data")["metricName"]=="BlobCapacity" || event.get("data")["metricName"]=="FileCapacity") && event.get("data")["total"] !=0 )
                        capacity_bytes=event.get("data")["total"]
                        capacity_Gib = capacity_bytes.to_f / (1024 ** 3)
                        storageaccount=event.get("data")["resourceId"].match(/STORAGEACCOUNTS\/([^\/]+)/)[1]
                        event.set("data.storageaccount", storageaccount)
                        event.set("data.capacity", capacity_Gib)
                        if event.get("data")["metricName"]=="BlobCapacity"
                          event.set("data.capacityTarget", "blob")
                        elsif event.get("data")["metricName"]=="FileCapacity"
                          event.set("data.capacityTarget", "file")
                        end
                      elsif (event.get("data")["metricName"]=="Transactions")
                        storageaccount=event.get("data")["resourceId"].match(/STORAGEACCOUNTS\/([^\/]+)/)[1]
                        event.set("data.storageaccount", storageaccount)
                      else
                        event.cancel
                      end
                      
                    # Metric of app service
                    elsif resource_type == "MICROSOFT.WEB"
                      appservice_plan=event.get("data")["resourceId"].match(/SERVERFARMS\/([^\/]+)/)[1]
                      metric=event.get("data")["metricName"]
                      puts "metric name : #{metric}"
                      if metric!="CpuPercentage" && metric!="MemoryPercentage"
                        event.cancel
                      end
                      event.set("data.appservicePlan", appservice_plan)
                    end
                  rescue => e
                    puts "Ruby exception app service metric : #{e.message}"
                  end
                '
          }
    }
    output {
      if [data.resourceType] == "MICROSOFT.WEB" {
        elasticsearch {
          hosts => ["https://es01:9200"]
          user => "elastic"
          password => "Aloulou556"
          document_id => "%{[@metadata][_id]}"
          index => "appservices-metrics-%{+YYYY.MM.dd}"
          ssl => true
          cacert => "/usr/share/logstash/certs/ca/ca.crt"
        }

      }
      if [data.resourceType] == "MICROSOFT.STORAGE" {
        elasticsearch {
          hosts => ["https://es01:9200"]
          user => "elastic"
          password => "Aloulou556"
          document_id => "%{[@metadata][_id]}"
          index => "storageaccounts-metrics-%{+YYYY.MM.dd}"
          ssl => true
          cacert => "/usr/share/logstash/certs/ca/ca.crt"
        }
      }

    }

